// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2foptions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2foptions_2eproto;
namespace rendu {
namespace core {
namespace options {
class Options;
struct OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
}  // namespace options
}  // namespace core
}  // namespace rendu
PROTOBUF_NAMESPACE_OPEN
template<> ::rendu::core::options::Options* Arena::CreateMaybeMessage<::rendu::core::options::Options>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rendu {
namespace core {
namespace options {

enum EnvType : int {
  ETDebug = 0,
  ETRelease = 1,
  EnvType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EnvType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EnvType_IsValid(int value);
constexpr EnvType EnvType_MIN = ETDebug;
constexpr EnvType EnvType_MAX = ETRelease;
constexpr int EnvType_ARRAYSIZE = EnvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvType_descriptor();
template<typename T>
inline const std::string& EnvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvType_descriptor(), enum_t_value);
}
inline bool EnvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvType>(
    EnvType_descriptor(), name, value);
}
enum HostType : int {
  ALL = 0,
  Zone = 1,
  Gate = 2,
  Realm = 3,
  World = 4,
  Scene = 5,
  HostType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HostType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HostType_IsValid(int value);
constexpr HostType HostType_MIN = ALL;
constexpr HostType HostType_MAX = Scene;
constexpr int HostType_ARRAYSIZE = HostType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostType_descriptor();
template<typename T>
inline const std::string& HostType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HostType_descriptor(), enum_t_value);
}
inline bool HostType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HostType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HostType>(
    HostType_descriptor(), name, value);
}
// ===================================================================

class Options final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rendu.core.options.Options) */ {
 public:
  inline Options() : Options(nullptr) {}
  ~Options() override;
  explicit PROTOBUF_CONSTEXPR Options(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Options(const Options& from);
  Options(Options&& from) noexcept
    : Options() {
    *this = ::std::move(from);
  }

  inline Options& operator=(const Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline Options& operator=(Options&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Options& default_instance() {
    return *internal_default_instance();
  }
  static inline const Options* internal_default_instance() {
    return reinterpret_cast<const Options*>(
               &_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Options& a, Options& b) {
    a.Swap(&b);
  }
  inline void Swap(Options* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Options>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Options& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Options& from) {
    Options::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Options* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rendu.core.options.Options";
  }
  protected:
  explicit Options(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvTypeFieldNumber = 1,
    kHostTypeFieldNumber = 2,
  };
  // .rendu.core.options.EnvType envType = 1;
  void clear_envtype();
  ::rendu::core::options::EnvType envtype() const;
  void set_envtype(::rendu::core::options::EnvType value);
  private:
  ::rendu::core::options::EnvType _internal_envtype() const;
  void _internal_set_envtype(::rendu::core::options::EnvType value);
  public:

  // .rendu.core.options.HostType hostType = 2;
  void clear_hosttype();
  ::rendu::core::options::HostType hosttype() const;
  void set_hosttype(::rendu::core::options::HostType value);
  private:
  ::rendu::core::options::HostType _internal_hosttype() const;
  void _internal_set_hosttype(::rendu::core::options::HostType value);
  public:

  // @@protoc_insertion_point(class_scope:rendu.core.options.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int envtype_;
    int hosttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Options

// .rendu.core.options.EnvType envType = 1;
inline void Options::clear_envtype() {
  _impl_.envtype_ = 0;
}
inline ::rendu::core::options::EnvType Options::_internal_envtype() const {
  return static_cast< ::rendu::core::options::EnvType >(_impl_.envtype_);
}
inline ::rendu::core::options::EnvType Options::envtype() const {
  // @@protoc_insertion_point(field_get:rendu.core.options.Options.envType)
  return _internal_envtype();
}
inline void Options::_internal_set_envtype(::rendu::core::options::EnvType value) {
  
  _impl_.envtype_ = value;
}
inline void Options::set_envtype(::rendu::core::options::EnvType value) {
  _internal_set_envtype(value);
  // @@protoc_insertion_point(field_set:rendu.core.options.Options.envType)
}

// .rendu.core.options.HostType hostType = 2;
inline void Options::clear_hosttype() {
  _impl_.hosttype_ = 0;
}
inline ::rendu::core::options::HostType Options::_internal_hosttype() const {
  return static_cast< ::rendu::core::options::HostType >(_impl_.hosttype_);
}
inline ::rendu::core::options::HostType Options::hosttype() const {
  // @@protoc_insertion_point(field_get:rendu.core.options.Options.hostType)
  return _internal_hosttype();
}
inline void Options::_internal_set_hosttype(::rendu::core::options::HostType value) {
  
  _impl_.hosttype_ = value;
}
inline void Options::set_hosttype(::rendu::core::options::HostType value) {
  _internal_set_hosttype(value);
  // @@protoc_insertion_point(field_set:rendu.core.options.Options.hostType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace options
}  // namespace core
}  // namespace rendu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rendu::core::options::EnvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rendu::core::options::EnvType>() {
  return ::rendu::core::options::EnvType_descriptor();
}
template <> struct is_proto_enum< ::rendu::core::options::HostType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rendu::core::options::HostType>() {
  return ::rendu::core::options::HostType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2foptions_2eproto
