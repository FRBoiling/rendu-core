// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pingpong/pingpong.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pingpong_2fpingpong_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pingpong_2fpingpong_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pingpong_2fpingpong_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pingpong_2fpingpong_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pingpong_2fpingpong_2eproto;
namespace org {
namespace caf {
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class PingOrPong;
struct PingOrPongDefaultTypeInternal;
extern PingOrPongDefaultTypeInternal _PingOrPong_default_instance_;
class Pong;
struct PongDefaultTypeInternal;
extern PongDefaultTypeInternal _Pong_default_instance_;
}  // namespace caf
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::caf::Ping* Arena::CreateMaybeMessage<::org::caf::Ping>(Arena*);
template<> ::org::caf::PingOrPong* Arena::CreateMaybeMessage<::org::caf::PingOrPong>(Arena*);
template<> ::org::caf::Pong* Arena::CreateMaybeMessage<::org::caf::Pong>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace caf {

// ===================================================================

class Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.caf.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  ~Ping() override;
  explicit PROTOBUF_CONSTEXPR Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ping& from) {
    Ping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.caf.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:org.caf.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pingpong_2fpingpong_2eproto;
};
// -------------------------------------------------------------------

class Pong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.caf.Pong) */ {
 public:
  inline Pong() : Pong(nullptr) {}
  ~Pong() override;
  explicit PROTOBUF_CONSTEXPR Pong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pong(const Pong& from);
  Pong(Pong&& from) noexcept
    : Pong() {
    *this = ::std::move(from);
  }

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pong& operator=(Pong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pong* internal_default_instance() {
    return reinterpret_cast<const Pong*>(
               &_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pong& a, Pong& b) {
    a.Swap(&b);
  }
  inline void Swap(Pong* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pong& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pong& from) {
    Pong::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pong* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.caf.Pong";
  }
  protected:
  explicit Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:org.caf.Pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pingpong_2fpingpong_2eproto;
};
// -------------------------------------------------------------------

class PingOrPong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.caf.PingOrPong) */ {
 public:
  inline PingOrPong() : PingOrPong(nullptr) {}
  ~PingOrPong() override;
  explicit PROTOBUF_CONSTEXPR PingOrPong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingOrPong(const PingOrPong& from);
  PingOrPong(PingOrPong&& from) noexcept
    : PingOrPong() {
    *this = ::std::move(from);
  }

  inline PingOrPong& operator=(const PingOrPong& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingOrPong& operator=(PingOrPong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingOrPong& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingOrPong* internal_default_instance() {
    return reinterpret_cast<const PingOrPong*>(
               &_PingOrPong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PingOrPong& a, PingOrPong& b) {
    a.Swap(&b);
  }
  inline void Swap(PingOrPong* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingOrPong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingOrPong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingOrPong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingOrPong& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingOrPong& from) {
    PingOrPong::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingOrPong* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.caf.PingOrPong";
  }
  protected:
  explicit PingOrPong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingFieldNumber = 1,
    kPongFieldNumber = 2,
  };
  // optional .org.caf.Ping ping = 1;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::org::caf::Ping& ping() const;
  PROTOBUF_NODISCARD ::org::caf::Ping* release_ping();
  ::org::caf::Ping* mutable_ping();
  void set_allocated_ping(::org::caf::Ping* ping);
  private:
  const ::org::caf::Ping& _internal_ping() const;
  ::org::caf::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::org::caf::Ping* ping);
  ::org::caf::Ping* unsafe_arena_release_ping();

  // optional .org.caf.Pong pong = 2;
  bool has_pong() const;
  private:
  bool _internal_has_pong() const;
  public:
  void clear_pong();
  const ::org::caf::Pong& pong() const;
  PROTOBUF_NODISCARD ::org::caf::Pong* release_pong();
  ::org::caf::Pong* mutable_pong();
  void set_allocated_pong(::org::caf::Pong* pong);
  private:
  const ::org::caf::Pong& _internal_pong() const;
  ::org::caf::Pong* _internal_mutable_pong();
  public:
  void unsafe_arena_set_allocated_pong(
      ::org::caf::Pong* pong);
  ::org::caf::Pong* unsafe_arena_release_pong();

  // @@protoc_insertion_point(class_scope:org.caf.PingOrPong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::org::caf::Ping* ping_;
    ::org::caf::Pong* pong_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pingpong_2fpingpong_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ping

// int32 id = 1;
inline void Ping::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Ping::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Ping::id() const {
  // @@protoc_insertion_point(field_get:org.caf.Ping.id)
  return _internal_id();
}
inline void Ping::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Ping::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:org.caf.Ping.id)
}

// -------------------------------------------------------------------

// Pong

// int32 id = 1;
inline void Pong::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Pong::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Pong::id() const {
  // @@protoc_insertion_point(field_get:org.caf.Pong.id)
  return _internal_id();
}
inline void Pong::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Pong::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:org.caf.Pong.id)
}

// -------------------------------------------------------------------

// PingOrPong

// optional .org.caf.Ping ping = 1;
inline bool PingOrPong::_internal_has_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ping_ != nullptr);
  return value;
}
inline bool PingOrPong::has_ping() const {
  return _internal_has_ping();
}
inline void PingOrPong::clear_ping() {
  if (_impl_.ping_ != nullptr) _impl_.ping_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::org::caf::Ping& PingOrPong::_internal_ping() const {
  const ::org::caf::Ping* p = _impl_.ping_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::caf::Ping&>(
      ::org::caf::_Ping_default_instance_);
}
inline const ::org::caf::Ping& PingOrPong::ping() const {
  // @@protoc_insertion_point(field_get:org.caf.PingOrPong.ping)
  return _internal_ping();
}
inline void PingOrPong::unsafe_arena_set_allocated_ping(
    ::org::caf::Ping* ping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ping_);
  }
  _impl_.ping_ = ping;
  if (ping) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.caf.PingOrPong.ping)
}
inline ::org::caf::Ping* PingOrPong::release_ping() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::org::caf::Ping* temp = _impl_.ping_;
  _impl_.ping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::caf::Ping* PingOrPong::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_release:org.caf.PingOrPong.ping)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::org::caf::Ping* temp = _impl_.ping_;
  _impl_.ping_ = nullptr;
  return temp;
}
inline ::org::caf::Ping* PingOrPong::_internal_mutable_ping() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ping_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::caf::Ping>(GetArenaForAllocation());
    _impl_.ping_ = p;
  }
  return _impl_.ping_;
}
inline ::org::caf::Ping* PingOrPong::mutable_ping() {
  ::org::caf::Ping* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:org.caf.PingOrPong.ping)
  return _msg;
}
inline void PingOrPong::set_allocated_ping(::org::caf::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ping_;
  }
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ping_ = ping;
  // @@protoc_insertion_point(field_set_allocated:org.caf.PingOrPong.ping)
}

// optional .org.caf.Pong pong = 2;
inline bool PingOrPong::_internal_has_pong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pong_ != nullptr);
  return value;
}
inline bool PingOrPong::has_pong() const {
  return _internal_has_pong();
}
inline void PingOrPong::clear_pong() {
  if (_impl_.pong_ != nullptr) _impl_.pong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::org::caf::Pong& PingOrPong::_internal_pong() const {
  const ::org::caf::Pong* p = _impl_.pong_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::caf::Pong&>(
      ::org::caf::_Pong_default_instance_);
}
inline const ::org::caf::Pong& PingOrPong::pong() const {
  // @@protoc_insertion_point(field_get:org.caf.PingOrPong.pong)
  return _internal_pong();
}
inline void PingOrPong::unsafe_arena_set_allocated_pong(
    ::org::caf::Pong* pong) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pong_);
  }
  _impl_.pong_ = pong;
  if (pong) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.caf.PingOrPong.pong)
}
inline ::org::caf::Pong* PingOrPong::release_pong() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::org::caf::Pong* temp = _impl_.pong_;
  _impl_.pong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::caf::Pong* PingOrPong::unsafe_arena_release_pong() {
  // @@protoc_insertion_point(field_release:org.caf.PingOrPong.pong)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::org::caf::Pong* temp = _impl_.pong_;
  _impl_.pong_ = nullptr;
  return temp;
}
inline ::org::caf::Pong* PingOrPong::_internal_mutable_pong() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pong_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::caf::Pong>(GetArenaForAllocation());
    _impl_.pong_ = p;
  }
  return _impl_.pong_;
}
inline ::org::caf::Pong* PingOrPong::mutable_pong() {
  ::org::caf::Pong* _msg = _internal_mutable_pong();
  // @@protoc_insertion_point(field_mutable:org.caf.PingOrPong.pong)
  return _msg;
}
inline void PingOrPong::set_allocated_pong(::org::caf::Pong* pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pong_;
  }
  if (pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pong);
    if (message_arena != submessage_arena) {
      pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pong_ = pong;
  // @@protoc_insertion_point(field_set_allocated:org.caf.PingOrPong.pong)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caf
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pingpong_2fpingpong_2eproto
