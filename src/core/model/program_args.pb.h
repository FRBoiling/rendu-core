// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/program_args.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2fprogram_5fargs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_2fprogram_5fargs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2fprogram_5fargs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2fprogram_5fargs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2fprogram_5fargs_2eproto;
namespace rendu {
namespace model {
class ProgramOption;
struct ProgramOptionDefaultTypeInternal;
extern ProgramOptionDefaultTypeInternal _ProgramOption_default_instance_;
}  // namespace model
}  // namespace rendu
PROTOBUF_NAMESPACE_OPEN
template<> ::rendu::model::ProgramOption* Arena::CreateMaybeMessage<::rendu::model::ProgramOption>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rendu {
namespace model {

enum ProgramType : int {
  All = 0,
  Hall = 1,
  World = 2,
  ProgramType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProgramType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProgramType_IsValid(int value);
constexpr ProgramType ProgramType_MIN = All;
constexpr ProgramType ProgramType_MAX = World;
constexpr int ProgramType_ARRAYSIZE = ProgramType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramType_descriptor();
template<typename T>
inline const std::string& ProgramType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProgramType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProgramType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProgramType_descriptor(), enum_t_value);
}
inline bool ProgramType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProgramType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProgramType>(
    ProgramType_descriptor(), name, value);
}
enum RunModeType : int {
  Online = 0,
  Develop = 1,
  Pressure = 2,
  RunModeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RunModeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RunModeType_IsValid(int value);
constexpr RunModeType RunModeType_MIN = Online;
constexpr RunModeType RunModeType_MAX = Pressure;
constexpr int RunModeType_ARRAYSIZE = RunModeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunModeType_descriptor();
template<typename T>
inline const std::string& RunModeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RunModeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RunModeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RunModeType_descriptor(), enum_t_value);
}
inline bool RunModeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RunModeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RunModeType>(
    RunModeType_descriptor(), name, value);
}
// ===================================================================

class ProgramOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rendu.model.ProgramOption) */ {
 public:
  inline ProgramOption() : ProgramOption(nullptr) {}
  ~ProgramOption() override;
  explicit PROTOBUF_CONSTEXPR ProgramOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgramOption(const ProgramOption& from);
  ProgramOption(ProgramOption&& from) noexcept
    : ProgramOption() {
    *this = ::std::move(from);
  }

  inline ProgramOption& operator=(const ProgramOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramOption& operator=(ProgramOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramOption* internal_default_instance() {
    return reinterpret_cast<const ProgramOption*>(
               &_ProgramOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProgramOption& a, ProgramOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgramOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProgramOption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rendu.model.ProgramOption";
  }
  protected:
  explicit ProgramOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConfigPathFieldNumber = 7,
    kZoneIdFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kProcessNumFieldNumber = 4,
    kTypeFieldNumber = 5,
    kRunModeFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string config_path = 7;
  void clear_config_path();
  const std::string& config_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_path();
  PROTOBUF_NODISCARD std::string* release_config_path();
  void set_allocated_config_path(std::string* config_path);
  private:
  const std::string& _internal_config_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_path(const std::string& value);
  std::string* _internal_mutable_config_path();
  public:

  // int32 zone_id = 2;
  void clear_zone_id();
  int32_t zone_id() const;
  void set_zone_id(int32_t value);
  private:
  int32_t _internal_zone_id() const;
  void _internal_set_zone_id(int32_t value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // int32 process_num = 4;
  void clear_process_num();
  int32_t process_num() const;
  void set_process_num(int32_t value);
  private:
  int32_t _internal_process_num() const;
  void _internal_set_process_num(int32_t value);
  public:

  // .rendu.model.ProgramType type = 5;
  void clear_type();
  ::rendu::model::ProgramType type() const;
  void set_type(::rendu::model::ProgramType value);
  private:
  ::rendu::model::ProgramType _internal_type() const;
  void _internal_set_type(::rendu::model::ProgramType value);
  public:

  // .rendu.model.RunModeType run_mode = 6;
  void clear_run_mode();
  ::rendu::model::RunModeType run_mode() const;
  void set_run_mode(::rendu::model::RunModeType value);
  private:
  ::rendu::model::RunModeType _internal_run_mode() const;
  void _internal_set_run_mode(::rendu::model::RunModeType value);
  public:

  // @@protoc_insertion_point(class_scope:rendu.model.ProgramOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_path_;
  int32_t zone_id_;
  int32_t server_id_;
  int32_t process_num_;
  int type_;
  int run_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2fprogram_5fargs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProgramOption

// string name = 1;
inline void ProgramOption::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ProgramOption::name() const {
  // @@protoc_insertion_point(field_get:rendu.model.ProgramOption.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProgramOption::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rendu.model.ProgramOption.name)
}
inline std::string* ProgramOption::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:rendu.model.ProgramOption.name)
  return _s;
}
inline const std::string& ProgramOption::_internal_name() const {
  return name_.Get();
}
inline void ProgramOption::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgramOption::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProgramOption::release_name() {
  // @@protoc_insertion_point(field_release:rendu.model.ProgramOption.name)
  return name_.Release();
}
inline void ProgramOption::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rendu.model.ProgramOption.name)
}

// int32 zone_id = 2;
inline void ProgramOption::clear_zone_id() {
  zone_id_ = 0;
}
inline int32_t ProgramOption::_internal_zone_id() const {
  return zone_id_;
}
inline int32_t ProgramOption::zone_id() const {
  // @@protoc_insertion_point(field_get:rendu.model.ProgramOption.zone_id)
  return _internal_zone_id();
}
inline void ProgramOption::_internal_set_zone_id(int32_t value) {
  
  zone_id_ = value;
}
inline void ProgramOption::set_zone_id(int32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:rendu.model.ProgramOption.zone_id)
}

// int32 server_id = 3;
inline void ProgramOption::clear_server_id() {
  server_id_ = 0;
}
inline int32_t ProgramOption::_internal_server_id() const {
  return server_id_;
}
inline int32_t ProgramOption::server_id() const {
  // @@protoc_insertion_point(field_get:rendu.model.ProgramOption.server_id)
  return _internal_server_id();
}
inline void ProgramOption::_internal_set_server_id(int32_t value) {
  
  server_id_ = value;
}
inline void ProgramOption::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:rendu.model.ProgramOption.server_id)
}

// int32 process_num = 4;
inline void ProgramOption::clear_process_num() {
  process_num_ = 0;
}
inline int32_t ProgramOption::_internal_process_num() const {
  return process_num_;
}
inline int32_t ProgramOption::process_num() const {
  // @@protoc_insertion_point(field_get:rendu.model.ProgramOption.process_num)
  return _internal_process_num();
}
inline void ProgramOption::_internal_set_process_num(int32_t value) {
  
  process_num_ = value;
}
inline void ProgramOption::set_process_num(int32_t value) {
  _internal_set_process_num(value);
  // @@protoc_insertion_point(field_set:rendu.model.ProgramOption.process_num)
}

// .rendu.model.ProgramType type = 5;
inline void ProgramOption::clear_type() {
  type_ = 0;
}
inline ::rendu::model::ProgramType ProgramOption::_internal_type() const {
  return static_cast< ::rendu::model::ProgramType >(type_);
}
inline ::rendu::model::ProgramType ProgramOption::type() const {
  // @@protoc_insertion_point(field_get:rendu.model.ProgramOption.type)
  return _internal_type();
}
inline void ProgramOption::_internal_set_type(::rendu::model::ProgramType value) {
  
  type_ = value;
}
inline void ProgramOption::set_type(::rendu::model::ProgramType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rendu.model.ProgramOption.type)
}

// .rendu.model.RunModeType run_mode = 6;
inline void ProgramOption::clear_run_mode() {
  run_mode_ = 0;
}
inline ::rendu::model::RunModeType ProgramOption::_internal_run_mode() const {
  return static_cast< ::rendu::model::RunModeType >(run_mode_);
}
inline ::rendu::model::RunModeType ProgramOption::run_mode() const {
  // @@protoc_insertion_point(field_get:rendu.model.ProgramOption.run_mode)
  return _internal_run_mode();
}
inline void ProgramOption::_internal_set_run_mode(::rendu::model::RunModeType value) {
  
  run_mode_ = value;
}
inline void ProgramOption::set_run_mode(::rendu::model::RunModeType value) {
  _internal_set_run_mode(value);
  // @@protoc_insertion_point(field_set:rendu.model.ProgramOption.run_mode)
}

// string config_path = 7;
inline void ProgramOption::clear_config_path() {
  config_path_.ClearToEmpty();
}
inline const std::string& ProgramOption::config_path() const {
  // @@protoc_insertion_point(field_get:rendu.model.ProgramOption.config_path)
  return _internal_config_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProgramOption::set_config_path(ArgT0&& arg0, ArgT... args) {
 
 config_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rendu.model.ProgramOption.config_path)
}
inline std::string* ProgramOption::mutable_config_path() {
  std::string* _s = _internal_mutable_config_path();
  // @@protoc_insertion_point(field_mutable:rendu.model.ProgramOption.config_path)
  return _s;
}
inline const std::string& ProgramOption::_internal_config_path() const {
  return config_path_.Get();
}
inline void ProgramOption::_internal_set_config_path(const std::string& value) {
  
  config_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgramOption::_internal_mutable_config_path() {
  
  return config_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ProgramOption::release_config_path() {
  // @@protoc_insertion_point(field_release:rendu.model.ProgramOption.config_path)
  return config_path_.Release();
}
inline void ProgramOption::set_allocated_config_path(std::string* config_path) {
  if (config_path != nullptr) {
    
  } else {
    
  }
  config_path_.SetAllocated(config_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (config_path_.IsDefault()) {
    config_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rendu.model.ProgramOption.config_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace rendu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rendu::model::ProgramType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rendu::model::ProgramType>() {
  return ::rendu::model::ProgramType_descriptor();
}
template <> struct is_proto_enum< ::rendu::model::RunModeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rendu::model::RunModeType>() {
  return ::rendu::model::RunModeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_2fprogram_5fargs_2eproto
